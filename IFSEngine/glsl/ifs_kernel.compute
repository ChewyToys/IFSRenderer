#version 430
//#version 430 compatibility
//#extension GL_ARB_compute_shader : enable
//#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_NV_shader_atomic_float : enable

//precision highp float;

layout(local_size_x = 64) in;

//%4=0 db float kell
struct CameraParameters
{
	//vec4 position; ///VEC4
	mat4 viewProjectionMatrix;
	vec4 position;
	vec4 forward;
};

struct Settings
{
	//current view:
	CameraParameters camera;
	vec4 focuspoint;//from camera,focusdistance
	float fog_effect;
	float dof;
	float focusdistance;
	float focusarea;//focal plane -> focal 'area'
	//current frame:
	int itnum;//length of iterators
	int pass_iters;//iterations per pass
	int dispatchCnt;
	int palettecnt;

	int resetPointsState;
	//padding
	int dummy0;
	int dummy1;
	int dummy2;
};

//TODO: remove
struct Affine
{
	float ox;
	float oy;
	float oz;

	float xx;
	float xy;
	float xz;

	float yx;
	float yy;
	float yz;

	float zx;
	float zy;
	float zz;
};

struct Iterator
{
	float wsum;//outgoing xaos weights sum
	float cs;
	float ci;//color index, 0 - 1
	float op;
	int tfId;
	int tfParamsStart;
	int padding2;
	int padding3;
};

layout(binding = 0, rgba32f) uniform writeonly image2D img_output;
//layout(rgba32f, binding = 1) uniform image2D histogram;

//biggest difference between uniform buffers and shader storage buffers is that you can write to shader storage buffers from your shader programs.
layout(std140, binding = 1) buffer histogrambuf
{
	vec4 histogram[];
};
layout(std140, binding = 2) buffer pointsbuf
{
	vec4 pointsstate[];//for each thread
};
//uniformba
layout(std430, binding = 3) buffer settingsbuf
{
	Settings settings;
};

layout(std430, binding = 4) buffer iterbuf
{
	Iterator its[];
};

layout(std140, binding = 5) buffer palettebuf
{
	vec4 palette[];
};

layout(std430, binding = 6) buffer tfparamsbuf
{
	float tfParams[];//parameters of all transforms
};

layout(std430, binding = 7) buffer xaosbuf
{
	float xaos[];//xaos matrix: weights to Iterators
};

layout(std430, binding = 8) buffer last_tf_index_buf
{
	int last_tf_index[];//remember previous tranform index for each thread, needed for xaos
};

uniform int width;
uniform int height;

//Default input vars:
//in uvec3 gl_NumWorkGroups;
//in uvec3 gl_WorkGroupID;
//in uvec3 gl_LocalInvocationID; //within workgroup
//in uvec3 gl_GlobalInvocationID; //within dispatch
//in uint  gl_LocalInvocationIndex; //1d local id

//random hash without sin: http://amindforeverprogramming.blogspot.com/2013/07/random-floats-in-glsl-330.html
uint hash(uint x) {
	x += (x << 10u);
	x ^= (x >> 6u);
	x += (x << 3u);
	x ^= (x >> 11u);
	x += (x << 15u);
	return x;
}
uint hash(uvec2 v) {
	return hash(v.x ^ hash(v.y));
}

uint hash(uvec3 v) {
	return hash(v.x ^ hash(v.y) ^ hash(v.z));
}

uint hash(uvec4 v) {
	return hash(v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w));
}
float random(float f) {
	const uint mantissaMask = 0x007FFFFFu;
	const uint one = 0x3F800000u;

	uint h = hash(floatBitsToUint(f));
	h &= mantissaMask;
	h |= one;

	float  r2 = uintBitsToFloat(h);
	return r2 - 1.0;
}
float random(float f1, float f2, uint nextSample) {
	const uint mantissaMask = 0x007FFFFFu;
	const uint one = 0x3F800000u;

	uint h = hash(uvec3(floatBitsToUint(f1), floatBitsToUint(f2), nextSample));
	h &= mantissaMask;
	h |= one;

	float  r2 = uintBitsToFloat(h);
	return r2 - 1.0;
}

float randhash(uint nextSample)
{
	return random(gl_GlobalInvocationID.x, settings.dispatchCnt, nextSample);
}

ivec2 Project(CameraParameters c, vec3 p, float ra, float rl)
{

	vec3 pointDir = normalize(p - c.position.xyz);
	if (dot(pointDir, c.forward.xyz) < 0.0)
		return ivec2(-2, -2);

	vec4 normalizedPoint = c.viewProjectionMatrix * vec4(p.xyz, 1.0f);
	normalizedPoint /= normalizedPoint.w;

	//dof
	float ratio = width / float(height);
	float dof = settings.dof * max(0, abs(dot(p - settings.focuspoint.xyz, -c.forward.xyz)) - settings.focusarea); //use focalplane normal
	normalizedPoint.xy += pow(rl, 0.5f) * dof * vec2(cos(ra * 6.28318530718f), sin(ra * 6.28318530718f));

	ivec2 o = ivec2(//image center
		int((normalizedPoint.x + 1) * width / 2.0f),
		int((normalizedPoint.y * ratio + 1) * height / 2.0f)
	);
	
	return o;

}

vec3 affine(Affine aff, vec3 input) {
	float px = aff.xx * input.x + aff.xy * input.y + aff.xz * input.z + aff.ox;
	float py = aff.yx * input.x + aff.yy * input.y + aff.yz * input.z + aff.oy;
	float pz = aff.zx * input.x + aff.zy * input.y + aff.zz * input.z + aff.oz;
	return vec3(px, py, pz);
}

//TODO: Compile this based on TransformFunction.ShaderCode, alphabetical order, add iterator hash
//Affine
#define OX (tfParams[p_cnt+0])
#define OY (tfParams[p_cnt+1])
#define OZ (tfParams[p_cnt+2])
#define XX (tfParams[p_cnt+3])
#define XY (tfParams[p_cnt+4])
#define XZ (tfParams[p_cnt+5])
#define YX (tfParams[p_cnt+6])
#define YY (tfParams[p_cnt+7])
#define YZ (tfParams[p_cnt+8])
#define ZX (tfParams[p_cnt+9])
#define ZY (tfParams[p_cnt+10])
#define ZZ (tfParams[p_cnt+11])

//Waves
#define Waves_Weight (tfParams[p_cnt+6]) //remove?
#define FreqX (tfParams[p_cnt+0])
#define FreqY (tfParams[p_cnt+1])
#define FreqZ (tfParams[p_cnt+2])
#define ScaleX (tfParams[p_cnt+3])
#define ScaleY (tfParams[p_cnt+4])
#define ScaleZ (tfParams[p_cnt+5])

vec3 Apply(Iterator iter, vec3 input)
{
	vec3 p = input;
	int p_cnt = iter.tfParamsStart;

	if (iter.tfId == 0)
	{//affine

		//get affine transform parameters
		int p_cnt = iter.tfParamsStart;
		Affine aff;
		aff.ox = OX;
		aff.oy = OY;
		aff.oz = OZ;
		aff.xx = XX;
		aff.xy = XY;
		aff.xz = XZ;
		aff.yx = YX;
		aff.yy = YY;
		aff.yz = YZ;
		aff.zx = ZX;
		aff.zy = ZY;
		aff.zz = ZZ;

		p = affine(aff, p.xyz);
	}
	else if (iter.tfId == 1)
	{//spherical
		float r = length(p);
		p = 0.9f/*weight*/ * p / (r * r);
	}
	else if (iter.tfId == 2)
	{//waves

		/*
		vOut.x = parVars[WEIGHT_0_0] * fma(parVars[WAVES2_SCALEX_0], sin(vIn.y * parVars[WAVES2_FREQX_0]), vIn.x);
		vOut.y = parVars[WEIGHT_0_0] * fma(parVars[WAVES2_SCALEY_0], sin(vIn.x * parVars[WAVES2_FREQY_0]), vIn.y);
		vOut.z = parVars[WEIGHT_0_0] * fma(parVars[WAVES2_SCALEZ_0], sin(precalcSqrtSumSquares * parVars[WAVES2_FREQZ_0]), vIn.z);
		*/
		vec3 o;

		o.x = Waves_Weight * fma(ScaleX, sin(p.y * FreqX), p.x);
		o.y = Waves_Weight * fma(ScaleY, sin(p.z * FreqY), p.y);
		o.z = Waves_Weight * fma(ScaleZ, sin(p.x * FreqZ), p.z);

		p = o;
	}
	else if (iter.tfId == 3)
	{//foci
		float exp_x = exp(p.x);
		float exp_x_2 = exp_x * 0.5;
		float exp_nz = 0.5 / exp_x;
		float cos_y = cos(p.y);
		float sin_y = sin(p.y);
		float cos_z = cos(p.z);
		float sin_z = sin(p.z);
		float r = 0.9/*weight*/ / (exp_x_2 + exp_nz - cos_y - cos_z);
		float fx = (exp_x_2 - exp_nz);
		p = vec3(fx, sin_y, sin_z) * r;
	}
	else if (iter.tfId == 4)
	{//loonie
		float weight = 0.5;
		float w2 = weight * weight;
		float r2 = dot(p, p);
		float r;
		if (r2 < w2)
			r = weight * sqrt(w2 / r2 - 1.0);
		else
			r = weight;
		p = r * p;
	}

	return p;
}

vec2 ApplyShader(Iterator it, vec2 input/*(color,opacity)*/)
{
	//float c = (input.x + it.ci) / it.cs;//color//ez hibas a paperben
	float c = it.cs * it.ci + (1.0f - it.cs) * input.x;
	float o = it.op;//opacity
	return vec2(c - floor(c), o);//(color,opacity)
}

vec3 getPaletteColor(float pos)
{
	float palettepos = pos * (settings.palettecnt - 1);
	int index = int(floor(palettepos));
	vec3 c1 = palette[index].xyz;
	vec3 c2 = palette[index+1].xyz;
	float a = fract(palettepos);
	//TODO: interpolate in a different color space?
	return mix(c1, c2, a);//lerp
}

void main() {
	uint gid = gl_GlobalInvocationID.x;

	int next = 34567;//TODO: option to change this seed by animation frame number

	if (settings.resetPointsState==1)
	{//usually on first dispatch, or when number of threads changes
		//randomize starting iterator
		last_tf_index[gid] = int(randhash(next++) * settings.itnum);
		//randomize starting point and color
		pointsstate[gid] = vec4(randhash(next++), randhash(next++), randhash(next++), randhash(next++));
	}

	vec3 p = pointsstate[gid].xyz;
	vec2 p_shader = vec2(pointsstate[gid].w, 1.0);


	for (int i = 0; i < settings.pass_iters; i++)
	{
		//pick a random xaos weighted Transform index
		int r_index = 0;
		float r = randhash(next++);
		r *= its[last_tf_index[gid]].wsum;//sum outgoing xaos weight
		float w_acc = 0.0f;//accumulate previous iterator xaos weights until r randomly chosen iterator reached
		for (int j = 0; j < settings.itnum; j++)
			if (w_acc < r) {
				w_acc += xaos[last_tf_index[gid] * settings.itnum + j];
				r_index = j;
			}
			else
				break;
		last_tf_index[gid] = r_index;

		//TODO: option: reset position if no change for n iterations
		if (w_acc == 0.0f)
		{//reset position if no weight out
			/*p.x = randhash(next++)-0.5f;
			p.y = randhash(next++)-0.5f;
			p.z = randhash(next++)-0.5f;*/
			//idea: place next to another point instead of random reset
			p = pointsstate[(gid + 1)].xyz;
			p_shader.x = pointsstate[(gid + 1)].w;
			last_tf_index[gid] = int(randhash(next++) * settings.itnum);
			return;
		}
		
		if (isinf(p.x) || isinf(p.y) || isinf(p.z) || (p.x == 0 && p.y == 0 && p.z == 0))
		{//reset position if too far
			//TODO: make this optional?
			//isinf: For each element i of the result, isinf returns true if x[i] is posititve or negative floating point infinity and false otherwise.
			/*p.x = randhash(next++)-0.5f;
			p.y = randhash(next++)-0.5f;
			p.z = randhash(next++)-0.5f;*/
			//idea: place next to another point instead of random reset
			p = pointsstate[(gid + 1)].xyz;
			p_shader.x = pointsstate[(gid + 1)].w;
			last_tf_index[gid] = last_tf_index[gid+1];
		}
	
		p = Apply(its[r_index], p);//transform here
		p_shader = ApplyShader(its[r_index], p_shader);/*color,opacity*/
	
		//perspective project
		float ra1 = randhash(next++);
		float ra2 = randhash(next++);
		ivec2 proj = Project(settings.camera, p, ra1, ra2);		
	
		//lands on the histogram && initial skipping
		if (proj.x >= 0 && proj.x < width && proj.y >= 0 && proj.y < height && !(i < 16 && settings.resetPointsState == 1))
		{
			vec4 color = vec4(getPaletteColor(p_shader.x), p_shader.y);
			if (settings.fog_effect > 0.0f)
			{//optional fog effect
				float pr1 = 1.0f / pow(1.0f + length(settings.focuspoint.xyz - p), settings.fog_effect);
				pr1 = clamp(pr1, 0.0f, 1.0f);
				color.w *= pr1;
			}
			color.xyz *= color.w;

			//accumulate hit
			int ipx = proj.x + proj.y * width;//pixel index

			//Use atomic float add if available. Slower but more accurate.
			#ifdef GL_NV_shader_atomic_float
				atomicAdd(histogram[ipx].r, color.r);
				atomicAdd(histogram[ipx].g, color.g);
				atomicAdd(histogram[ipx].b, color.b);
				atomicAdd(histogram[ipx].w, color.w);//db
			#else
				histogram[ipx].rgb += color.rgb;
				histogram[ipx].w += color.w;//db
			#endif

		}
	
	}
	
	pointsstate[gid] = vec4(p, p_shader.x);

}
